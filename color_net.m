function [Y,Xf,Af] = color_net(X,~,~)
%COLOR_NET neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Dec-2014 11:46:32.
% 
% [Y] = color_net(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [2.89514352479452e-14;8.99269892456174e-08;8.99269892456174e-08;2.89514352479452e-14];
  x1_step1_gain = [0.100002388766415;0.100009555857756;0.100009555857756;0.100002388766415];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-3453.200657628006411;53.659753867519860648;-11.985428812561952583;-432.83876009092040249;114.59058089583119511];
  IW1_1 = [1199.9671705729242603 -4537.0977319840130804 1004.7030134297662016 670.74658730922635641;-85.156553358264289955 19.282726909714959618 196.45259677439261736 -90.400002467103689696;-92.508119344066201961 34.537367530631790657 24.243354356103502312 18.760064172683396322;427.29082197063354442 -865.44191576363209606 541.91342316144891811 248.89968330169114097;-17.846025801009396616 420.59997833895488384 -33.673484778137805051 -202.65855951676991253];
  
  % Layer 2
  b2 = [-1.0000006331727051556;6.7096240210319952852e-07;-1.000000581991824955;-1.0000013766025643847;3.625525768016294943e-06;-1.0000017047210756349];
  LW2_1 = [-7.1884262693458210728e-07 0.99999992789245317759 -0.9999998898673764236 -0.9999999346413686041 -1.0000001310110797625;7.1884278206911744195e-07 -0.9999999819195427575 -1.1671918680356990088e-07 0.99999999525505423037 1.0000001688007043033;-5.5873805278030963432e-07 0.99999992106407320502 1.7549565164940904655e-07 -1.000000094503691983 -2.1054070571476149423e-08;-1.0000021607551259351 -4.7240754029637243721e-07 4.1245756742824799057e-07 1.0000008243662432683 -1.9646362313679189066e-08;1.000004409459282595 1.121425587809857237e-06 -1.1212377287204294908e-06 -7.6436079560907145041e-07 1.9525304371006653377e-08;-1.6899662587519515034e-06 -1.0000005160550313743 1.0000005398710729576 -2.611544147863574395e-08 -1.6614496065536902885e-08];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [2;2;2;2;2;2];
  y1_step1_xoffset = [0;0;0;0;0;0];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
