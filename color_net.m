function [Y,Xf,Af] = color_net(X,~,~)
%COLOR_NET neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Dec-2014 00:18:06.
% 
% [Y] = color_net(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [2.89514352479452e-14;8.99269892456174e-08;8.99269892456174e-08;2.89514352479452e-14];
  x1_step1_gain = [0.100002388766415;0.100009555857756;0.100009555857756;0.100002388766415];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-364.56690602676201;-248.16048932751568;-114.01168905400176;-1.2204675118970032;297.76431149504418];
  IW1_1 = [39.426546510525938 -398.3418423133125 19.742996479777432 -23.848921249900762;246.66489285697747 -503.27062495685402 294.91395140849659 131.28319106808445;24.096101586450068 -399.3317921054857 42.458341980936751 189.62617280005261;114.04179077934477 -49.871614379279841 -112.67399531587861 43.253381998019378;-288.81331354219037 230.9149782736182 -483.1772585344159 -30.783703968898458];
  
  % Layer 2
  b2 = [-1.9860944313952845e-08;-8.3063591757048409e-08;-1.0000000149513153;1.4738366039471847e-07;-1.0000001020174274;-1.9999999274903819];
  LW2_1 = [1.0000000684748462 -4.3042852189998876e-08 8.4884490925728169e-08 -8.8347134428863025e-08 4.1830304375832108e-08;-5.3140909814805064e-08 1.0000000750716951 -1.0000000841369339 1.0000000801643025 1.1146586771928578e-07;-5.4684420872719701e-11 -1.0000000488613967 1.3841784919619419e-08 -1.0000000539526031 3.6473764502647304e-09;-1.3017263583147325e-13 -1.5144470400504334e-07 2.2543832389689461e-13 1.4751085023602164e-08 -1.0000003135794115;4.5560846827715928e-08 1.0000003697622859 -4.425768204143342e-08 1.5616600347520206e-08 1.0000004574677992;-1.0000000608399686 -1.0000002014850284 1.0000000296681146 3.1767749075088584e-08 -3.0083193626954363e-07];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [2;2;2;2;2;2];
  y1_step1_xoffset = [0;0;0;0;0;0];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
