function [Y,Xf,Af] = color_net(X,~,~)
%COLOR_NET neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Dec-2014 10:45:35.
% 
% [Y] = color_net(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [2.89514352479452e-14;8.99269892456174e-08;8.99269892456174e-08;2.89514352479452e-14];
  x1_step1_gain = [0.100002388766415;0.100009555857756;0.100009555857756;0.100002388766415];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-46.841325931689105744;24.31522368730441741;15.876556247088918994;-15.695349890987385422;11.995651712449507897];
  IW1_1 = [41.699750350215012418 -89.934793439157957096 52.459853520145998118 23.505426960499285371;10.655588206585749234 -2.1599834932869055315 26.588908123948399975 -10.707853904614907492;58.246740813580267115 -33.067511032849708386 -25.555812533488527549 1.7601672090909286084;8.906606156037280897 -83.607074612420888116 11.550855345863881851 47.827832853580602546;46.786169434663889888 42.146415864197209089 67.292505590822997874 -42.130870576471821209];
  
  % Layer 2
  b2 = [-2.0022802884792612055;0.0020341476707227031107;-1.0004815212800128865;-1.0114871453810496682;0.012669910357014403657;-0.00045510288741244618723];
  LW2_1 = [-1.0023911545197312645 0.99903231159747007961 -0.0014108991621118891976 1.0049065829678478501 0.0039924181912535973427;1.0020194286117669602 0.00045180673762195387722 1.0021275800782847298 -1.004304350137245061 -0.0027345091168091131481;-1.0009439265876478586 7.3788667663660800636e-05 -1.0010226606867409505 -0.00010264646713645199025 -0.00062824286170366132678;-0.010793125528808379665 -0.00045295701241963946121 -0.01204016096640887247 1.012396004997743626 1.0001180352362477599;1.0133356401174449246 0.0019674669427904630664 0.012369700809464638513 -1.0141747318763554286 -1.0022220667924013338;-0.0012268620930243473444 -1.0010724169331270961 -2.3560072487920449315e-05 0.0012791405151462670146 0.0014743653434135537209];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [2;2;2;2;2;2];
  y1_step1_xoffset = [0;0;0;0;0;0];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
