function [Y,Xf,Af] = color_net(X,~,~)
%COLOR_NET neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Dec-2014 12:25:02.
% 
% [Y] = color_net(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [1.45045685305343e-20;2.5706744502673e-11;2.5706744502673e-11;1.45045685305343e-20];
  x1_step1_gain = [0.10000340295297;0.100013612506829;0.100013612506829;0.10000340295297];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [2.9703965564060372806;-5.524995505492785064;-6.4725064314401183907;7.8957109089803001467;4.2954620352375965098;-4.5813661666000431438;-2.3803909461825285554;-1.0109102651685959451;5.502092213934933973;2.5773659034036140447];
  IW1_1 = [-3.3789763800543801686 2.402145898065164431 -1.1867524176102932643 -1.9330317892225663545;0.20457168699150080071 -5.3021084776491056445 0.017561962401225334612 0.0044452487779586278074;0.70690699826229885794 -7.0858722171899133357 0.031060520445944296564 0.018394680103680227656;-18.919904771306633506 3.767430128477939455 -7.7312100718519625175 -7.5652114852953475932;-4.3277305797911758134 4.6021777639952361483 -9.2630435964758692791 -3.8336391027337306525;7.7079565408390520176 -4.1226886174827033216 16.095865802779208309 4.7596270675237208891;-12.747163533162000348 -1.0008426474816103369 -2.1457838035151515221 14.486207657023921769;26.372878056769188504 -19.986619704167786438 1.9127228988985653935 -9.4573601879008641902;-0.35892426225644014082 22.931231958883302013 -3.1585021153845138642 -14.986336829149216499;0.44865121199396718055 -27.638167858944907351 18.799403750420609072 11.477234759212645798];
  
  % Layer 2
  b2 = [-4.3779133883974914454;1.0435058327419124424;-1.4991693095207172526;-0.072139408766064949674;0.26569507241587658752;-1.5122525862977607147];
  LW2_1 = [-5.5463055711790021363 5.612780145919535002 -2.7048802904358026922 5.7359707472121526095 0.35253048815981036235 -5.2908448576577278288 -5.7594150151519434289 -0.0056654594199192402984 -5.3340388674531613589 -0.024612790227622766831;4.2959509950034817649 -5.9116214721453452796 2.4100794423462930105 -5.2548332106040414047 0.77387542884959126255 3.6994582785812464287 4.1315432716283231329 1.0129373002094417267 3.5083983205874371691 0.030699716326809324551;0.85770182781374249004 0.29393537273757602835 0.19414111120508326103 -0.21838517772530169347 -1.0790095628916800408 -1.2541233536117546432 -1.247528063046908553 -1.0103311272248109987 -1.0919437117734838161 -1.0140626296361401337;-0.43464333900607277084 -0.31676987737631534525 -0.03774812956679861331 0.039003691956444180855 -0.42940390873420475337 0.35285733289340098784 0.78915423686491070754 0.0027966052753399437379 1.7023395474277189798 1.0192809747288653632;0.38736249174208514656 0.062822635515298028142 0.093298688175274785417 -0.14415777853392514052 0.47520945934495689711 1.8866282298266734418 0.42072676755014820626 -0.00078921735022497493256 0.46498983755023703957 -0.012852526482754457471;-1.4925628138002449141 -0.40164272981902759962 -0.32067464407518186942 0.55577466228271688031 -0.19756856084441348775 -2.1768680111851934633 -0.86648364245144859908 0.0030632662110549498113 -2.1112324412179055422 0.0051830512704469436369];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [2;2;2;2;2;2];
  y1_step1_xoffset = [0;0;0;0;0;0];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
